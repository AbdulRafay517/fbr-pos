import { Injectable } from '@nestjs/common';
import * as PDFDocument from 'pdfkit';
import { Invoice, InvoiceItem, Client, Branch, User } from '@prisma/client';

@Injectable()
export class PdfService {
  async generateInvoicePdf(
    invoice: Invoice & {
      client: Client;
      branch: Branch;
      createdBy: User;
      items: InvoiceItem[];
    },
  ): Promise<Buffer> {
    return new Promise((resolve) => {
      const chunks: Buffer[] = [];
      const doc = new PDFDocument({ size: 'A4', margin: 50 });

      doc.on('data', (chunk) => chunks.push(chunk));
      doc.on('end', () => resolve(Buffer.concat(chunks)));

      // Header
      doc
        .fontSize(20)
        .text('INVOICE', { align: 'center' })
        .moveDown();

      // Invoice Details
      doc
        .fontSize(12)
        .text(`Invoice Number: ${invoice.invoiceNumber}`)
        .text(`Date: ${invoice.date.toLocaleDateString()}`)
        .moveDown();

      // Client Information
      doc
        .text('Bill To:', { underline: true })
        .text(invoice.client.name)
        .text(invoice.branch.name)
        .text(`${invoice.branch.city}, ${invoice.branch.province}`)
        .moveDown();

      // Items Table Header
      const tableTop = doc.y;
      doc
        .fontSize(10)
        .text('Description', 50, tableTop)
        .text('Quantity', 300, tableTop)
        .text('Unit Price', 400, tableTop)
        .text('Total', 500, tableTop)
        .moveDown();

      // Items Table Content
      let y = doc.y;
      invoice.items.forEach((item) => {
        doc
          .text(item.description, 50, y)
          .text(item.quantity.toString(), 300, y)
          .text(`$${item.unitPrice.toFixed(2)}`, 400, y)
          .text(`$${item.total.toFixed(2)}`, 500, y);
        y += 20;
      });

      // Totals
      const totalsY = y + 20;
      doc
        .text('Subtotal:', 400, totalsY)
        .text(`$${invoice.subtotal.toFixed(2)}`, 500, totalsY)
        .text('Tax:', 400, totalsY + 20)
        .text(`$${invoice.taxAmount.toFixed(2)}`, 500, totalsY + 20)
        .text('Total:', 400, totalsY + 40)
        .text(`$${invoice.totalAmount.toFixed(2)}`, 500, totalsY + 40);

      // Notes
      if (invoice.notes) {
        doc
          .moveDown(2)
          .text('Notes:', { underline: true })
          .text(invoice.notes);
      }

      // Footer
      doc
        .fontSize(10)
        .text(
          `Generated by ${invoice.createdBy.name} on ${new Date().toLocaleDateString()}`,
          50,
          700,
          { align: 'center', width: 500 },
        );

      doc.end();
    });
  }
} 